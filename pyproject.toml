[build-system]
requires = [
    'setuptools>=61,<=65.5.1;python_version<"3.12"',
    'setuptools>=61;python_version>="3.12"',
    'setuptools_scm[toml]>=6.2',
    'wheel'
]

# ==============================================================================

# ==============================================================================

[project]
name = 'aluso-labels-generator'
authors = [
     {name = 'Damien Nguyen', email = 'damien.nguyen@alumni.epfl.ch'}
]
description = 'A label generator for EPFL Alumni Eastern Switzerland events.'
requires-python = '>= 3.8'
license = {text= 'MIT License'}
readme = 'README.md'
classifiers = [
    'License :: OSI Approved :: MIT',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11'
]
dynamic = ["version"]

dependencies = [
    'Flask>=2,<3',
    'flask-wtf>1'
]

[project.urls]
'Documentation' = 'https://github.com/Takishima/AluSO-Label-Generator'
'Download' = 'https://github.com/Takishima/AluSO-Label-Generator/releases'
'Homepage' = 'https://github.com/Takishima/AluSO-Label-Generator'
'Issue Tracker' = 'https://github.com/Takishima/AluSO-Label-Generator/issues'
'Source' = 'https://github.com/Takishima/AluSO-Label-Generator'

# --------------------------------------

[tool.setuptools]
zip-safe = false

[tool.setuptools.dynamic]
version = {file = "VERSION.txt"}

[tool.setuptools.packages.find]
include = ['aluso_labels']

# ==============================================================================

[tool.ruff]
line-length = 120
target-version = 'py38'

select = ['F',   # pyflakes
          'E',   # pycodestyle
          'W',   # pycodestyle
          'I',   # isort
          'N',   # pep8-naming
          'D',   # pydocstyle
          'UP',  # pyupgrade
          'YTT', # flake-2020
          'ANN', # flake8-annotations
          'S',   # flake8-bandit
          'BLE', # flake8-blind-except
          'B',   # flake8-bugbear
          'A',   # flake8-builtins
          'C4',  # flake8-comprehensions
          'T10', # flake8-debugger
          'ISC', # flake8-implicit-str-concat
          'ICN', # flake8-import-conventions
          'PIE', # flake8-pie
          'PT',  # flake8-pytest-style
          'Q',   # flake8-quotes
          'RSE', # flake8-raise
          'RET', # flake8-return
          'SLF', # flake8-self
          'SIM', # flake8-simplify
          'TID', # flake8-tidy-imports
          'ARG', # flake8-unused-arguments
          'PTH', # flake8-use-pathlib
          'ERA', # eradicate
          'PL',  # pylint
          'RUF', # ruff-specific rules
]
ignore = ['ANN101', # missing-type-self
          'D203',   # one-blank-line-before-class
          'D212',   # multi-line-summary-first-line
          'S603'    # subprocess-without-shell-equals-true
]

[tool.ruff.per-file-ignores]

'tests/python/*.py' = ['S101', 'SLF001', 'PLR0913', 'PLR2004', 'D']


[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-quotes]
docstring-quotes = 'double'
inline-quotes = 'single'
multiline-quotes = 'single'

[tool.ruff.pydocstyle]
convention = 'google'

# --------------------------------------

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
skip-string-normalization = true

# --------------------------------------

[tool.coverage]
    [tool.coverage.run]
        omit = [
            '*_test.py',
            '*_fixtures.py'
        ]

# --------------------------------------

[tool.pylint]
    [tool.pylint.master]
    ignore-patterns = [
        '.*_test.py',
        '.*_fixtures.py',
    ]

    init-hook = '''from pylint.config import find_default_config_files;\
    import os, sys; \
    sys.path.append(os.path.dirname(list(find_default_config_files())[0]))'''

    [tool.pylint.basic]
    good-names = ['COMMITTEE_LIST']

    [tool.pylint.format]
    max-line-length = 120

    [tool.pylint.typecheck]
    ignored-modules = [
        'wsgi',
    ]

# --------------------------------------

[tool.doc8]
verbose = 0
max_line_length = 120
ignore-path-errors = [
]

# --------------------------------------

[tool.isort]

profile = "black"


# --------------------------------------

[tool.setuptools_scm]
write_to = 'VERSION.txt'
write_to_template = '{version}'
parentdir_prefix_version = 'aluso-labels-'
local_scheme = 'no-local-version'
fallback_version = 'v1.0.0'


# --------------------------------------

[tool.yapf]
column_limit = 120


# --------------------------------------

[tool.cibuildwheel]
archs = ['auto64']
build-frontend = 'build'
build-verbosity = 1
skip = 'pp* *-musllinux*'
# environment = {}
# before-test = []

# test-command = 'python {package}/...'

# Normal options, etc.
manylinux-x86_64-image = 'manylinux2014'

[[tool.cibuildwheel.overrides]]
select = 'cp3{8,9}-*'
manylinux-x86_64-image = 'manylinux2010'
